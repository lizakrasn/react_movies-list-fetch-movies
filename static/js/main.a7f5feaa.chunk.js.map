{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/service.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","target","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","addMovie","useState","inputValue","setInputValue","foundMovie","setFoundMovie","hasError","setHasError","onSubmit","event","a","preventDefault","fetch","url","then","response","json","movieFromServer","Response","serverMovie","Title","Plot","Poster","imdbID","htmlFor","value","onChange","onChangeValue","type","id","placeholder","classNames","input","disabled","onClick","App","setMovies","moviesList","some","movieItem","isMovieUnique","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7f5feaa.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a target=\"blank\" href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport PropTypes from 'prop-types';\n\nimport classNames from 'classnames';\nimport { MovieCard } from '../MovieCard';\nimport { searchMovie } from '../../api/service';\n\nfunction convertMovie(serverMovie) {\n  return {\n    title: serverMovie.Title,\n    description: serverMovie.Plot,\n    imgUrl: serverMovie.Poster,\n    imdbUrl: `https://www.imdb.com/title/${serverMovie.imdbID}/`,\n    imdbId: serverMovie.imdbID,\n  };\n}\n\nfunction onChangeValue(event, setHasError, setInputValue) {\n  setHasError(false);\n  setInputValue(event.target.value);\n}\n\nexport const FindMovie = ({ addMovie, movies }) => {\n  const [inputValue, setInputValue] = useState('');\n  const [foundMovie, setFoundMovie] = useState(null);\n  const [hasError, setHasError] = useState(false);\n\n  function addMovieToTheList() {\n    addMovie(foundMovie);\n\n    setInputValue('');\n    setFoundMovie(null);\n  }\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={async(event) => {\n          event.preventDefault();\n\n          const movieFromServer = await searchMovie(inputValue);\n\n          if (movieFromServer.Response === 'False') {\n            setHasError(true);\n          } else {\n            setHasError(false);\n            setFoundMovie(convertMovie(movieFromServer));\n          }\n        }}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              value={inputValue}\n              onChange={\n                event => onChangeValue(event, setHasError, setInputValue)}\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames({\n                input: true,\n                'is-danger': hasError,\n              })}\n            />\n          </div>\n\n          {hasError\n            ? (\n              <p className=\"help is-danger\">\n                Can&apos;t find a movie with such a title\n              </p>\n            )\n            : <></>\n          }\n\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              disabled={!foundMovie}\n              onClick={() => addMovieToTheList()}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {foundMovie\n          ? <MovieCard {...foundMovie} />\n          : <p>Use search bar to find a movie.</p>}\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string.isRequired,\n    imgUrl: PropTypes.string.isRequired,\n    imdbUrl: PropTypes.string.isRequired,\n  })).isRequired,\n};\n","const apiKey = 'cbb5e647';\nconst url = 'https://www.omdbapi.com/?apikey=';\n\nexport function searchMovie(title) {\n  return fetch(`${url + apiKey}&t=${title}`)\n    .then(response => response.json());\n}\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nfunction isMovieUnique(movie, moviesList) {\n  return !moviesList.some(movieItem => movieItem.imdbId === movie.imdbId);\n}\n\nexport const App = () => {\n  const [movies, setMovies] = useState([]);\n\n  const addMovie = (movie) => {\n    if (isMovieUnique(movie, movies)) {\n      setMovies([...movies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}